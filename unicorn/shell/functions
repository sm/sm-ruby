#!/bin/sh

unicorn_cli()
{
  local number_of_args

  trace_filter unicorn || set -o xtrace

  number_of_args=${#extension_args[@]}

  for ((index=0 ; index < $number_of_args ; index++))
  do
    token="${extension_args[$index]}"

    case "$token" in
      (--version)
        package_version="${extension_args[$((++index))]}"
        ;;
      (--licence)
        display_extension_licence
        exit 0
        ;;
      (--help|-h)
        unicorn_usage
        exit 0
        ;;
      (*)
        true # Ignore?
        ;;
    esac
  done
}

set_master_pid()
{
  trace_filter unicorn || set -o xtrace

  if variables are nonempty project
  then
    running_pid=$( ps auxww |
    awk "/[u]nicorn master/ && ! /(old)/ && /\/${project} \// {print \$2}"
    )

    old_pid=$( ps auxww |
    awk "/[u]nicorn master/ && /(old)/ && /\/${project} \// {print \$2}"
    )
  else
    running_pid=$( ps auxww |
    awk "/[u]nicorn master/ && ! /(old)/ && /\/${USER} \// {print \$2}"
    )
    old_pid=$( ps auxww |
    awk "/[u]nicorn master/ && /(old)/ && /\/${USER} \// {print \$2}"
    )

    log "WARNING: 'project' should be set in ~/.smrc"
  fi

  if [[ ${running_pid} > 0 ]]
  then
    echo ${running_pid} > "$pid_file" # Make sure the correct running pid is in the pid_file.
    master_pid=${running_pid} # Set to the found running pid_file.
  elif [[ ${pid_file_pid} > 0 ]]
  then
    master_pid=${pid_file_pid} # Running and matches pid_file.
  fi

  # TODO: if process is running ${master_pid}
  if os is linux && [[ ! -d "/proc/${master_pid}" ]]
  then # Ensure that the proc exists, otherwise reset master_pid.
    master_pid=0
  fi
}

load_ruby_environment()
{
  trace_filter unicorn || set -o xtrace

  if file exists "$HOME/.rvm/environments/default"
  then
    files source "$HOME/.rvm/environments/default"
  elif file exists "/usr/local/rvm/environments/default"
  then
    files source "/usr/local/rvm/environments/default"
  fi
}
